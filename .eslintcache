[{"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/index.js":"1","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/App.js":"2","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/hooks/useAuth.js":"3","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/styles/theme.js":"4","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/styles/GlobalStyles.js":"5","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Toast/StyledToast.jsx":"6","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Route/PrivateRoute.jsx":"7","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Dashboard/Dashboard.jsx":"8","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Layout/Layout.jsx":"9","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/Login.jsx":"10","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/ResetPassword.jsx":"11","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/Signup.jsx":"12","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/ForgotPassword.jsx":"13","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/NotFound/NotFound.jsx":"14","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/SearchBar/SearchBar.js":"15","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Layout/Grid.jsx":"16","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/FormContainer.jsx":"17","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/ReCaptcha.jsx":"18","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/Form.jsx":"19","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Typography/Text.jsx":"20","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Typography/H1.jsx":"21","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Nav/Nav.jsx":"22","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Button/Button.jsx":"23"},{"size":644,"mtime":1635997856436,"results":"24","hashOfConfig":"25"},{"size":1179,"mtime":1635997856266,"results":"26","hashOfConfig":"25"},{"size":2825,"mtime":1635997856416,"results":"27","hashOfConfig":"25"},{"size":731,"mtime":1635997856446,"results":"28","hashOfConfig":"25"},{"size":585,"mtime":1635997856436,"results":"29","hashOfConfig":"25"},{"size":666,"mtime":1635997856386,"results":"30","hashOfConfig":"25"},{"size":366,"mtime":1635997856386,"results":"31","hashOfConfig":"25"},{"size":849,"mtime":1636217303132,"results":"32","hashOfConfig":"25"},{"size":351,"mtime":1635997856356,"results":"33","hashOfConfig":"25"},{"size":4318,"mtime":1636217303124,"results":"34","hashOfConfig":"25"},{"size":4131,"mtime":1635997856316,"results":"35","hashOfConfig":"25"},{"size":4625,"mtime":1636098038351,"results":"36","hashOfConfig":"25"},{"size":3172,"mtime":1636098038324,"results":"37","hashOfConfig":"25"},{"size":491,"mtime":1635997856376,"results":"38","hashOfConfig":"25"},{"size":1611,"mtime":1636098038374,"results":"39","hashOfConfig":"25"},{"size":850,"mtime":1635997856346,"results":"40","hashOfConfig":"25"},{"size":674,"mtime":1635997856296,"results":"41","hashOfConfig":"25"},{"size":1234,"mtime":1635997856306,"results":"42","hashOfConfig":"25"},{"size":1546,"mtime":1636098038333,"results":"43","hashOfConfig":"25"},{"size":986,"mtime":1635997856406,"results":"44","hashOfConfig":"25"},{"size":440,"mtime":1635997856396,"results":"45","hashOfConfig":"25"},{"size":1357,"mtime":1635997856366,"results":"46","hashOfConfig":"25"},{"size":863,"mtime":1635997856336,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c01mwz",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/index.js",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/App.js",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/hooks/useAuth.js",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/styles/theme.js",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/styles/GlobalStyles.js",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Toast/StyledToast.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Route/PrivateRoute.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Dashboard/Dashboard.jsx",["100","101"],"import React from 'react';\nimport styled from 'styled-components';\n\nimport H1 from '../Typography/H1';\nimport Text from '../Typography/Text';\nimport { useAuth } from '../../hooks/useAuth';\n\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport CourseData from \"../../Data.json\";\n\n\nconst Dashboard = () => {\n  const auth = useAuth();\n  return (\n    <DashboardContainer>\n      <H1>Spotlight Search</H1>\n      {/* <Text>Logged in as {auth.user.email}</Text> */}\n      <SearchBar placeholder=\"Enter a Course Name...\" data={CourseData} />\n    </DashboardContainer>\n\n  );\n};\n\nconst DashboardContainer = styled.div`\n  grid-column: 2 / span 12;\n  padding: 3rem 0 5.5rem 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  \n  @media ${(props) => props.theme.breakpoints.m} {\n    grid-column: 2 / span 6;\n  }\n`;\n\nexport default Dashboard;\n","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Layout/Layout.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/Login.jsx",["102"],"import React, { useEffect, useRef } from 'react';\nimport { useTheme } from 'styled-components';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from 'react-toastify';\nimport { useHistory, Link } from 'react-router-dom';\n\nimport H1 from '../Typography/H1';\nimport Text from '../Typography/Text';\nimport FormContainer from './FormContainer';\nimport { ReCaptcha } from './ReCaptcha';\nimport { useAuth } from '../../hooks/useAuth';\nimport Form from './Form';\nimport Particles from 'react-particles-js';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Email is required')\n  ,\n  password: Yup.string().required('Password is required'),\n  captchaToken: Yup.string().required('Verify you are a human'),\n});\n\nconst Login = () => {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    setValue,\n    clearErrors,\n    watch,\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const auth = useAuth();\n\n  const theme = useTheme();\n\n  const history = useHistory();\n\n  const submitRef = useRef(null);\n\n  const emailRef = useRef(null);\n\n  const passwordRef = useRef(null);\n\n  // Manually register captchaToken\n  useEffect(() => {\n    register({ name: 'captchaToken' });\n  }, []);\n\n  // Watch for changes to captcha\n  const watchCaptcha = watch('captchaToken');\n\n  // Set focus on email\n  useEffect(() => {\n    emailRef.current.focus();\n  }, []);\n\n  const onSubmit = async (data) => {\n    try {\n      await auth.login('is' + data.email + '@ed.ritsumei.ac.jp', data.password);\n      toast('Welcome! ðŸ‘‹');\n      reset();\n      history.push('/');\n    } catch {\n      toast.error('Error logging in.');\n    }\n  };\n\n  const onVerifyCaptcha = (token) => {\n    setValue('captchaToken', token);\n    clearErrors(['captchaToken']);\n    submitRef.current.focus();\n  };\n\n  return (\n    <FormContainer>\n      <H1 textAlign='center' margin='0 0 2rem 0'>\n        ISSE Hub\n      </H1>\n      <Text margin='0 0 1rem 0' textAlign='center'>\n        Enter your ISSE email and password.\n      </Text>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <label>is\n          <input\n            type='text'\n            name='email'\n            placeholder=''\n            autoComplete='off'\n            ref={(e) => {\n              register(e);\n              emailRef.current = e;\n            }}\n          />\n          {errors.email && (\n            <Text\n              color='#F6406C'\n              size='small'\n              margin='0 0 1rem 0'\n              textAlign='center'\n            >\n              {errors.email.message}\n            </Text>\n          )}\n          @ed.ritsumei.ac.jp\n        </label>\n        <input\n          type='password'\n          name='password'\n          placeholder='Password'\n          ref={(e) => {\n            register(e);\n            passwordRef.current = e;\n          }}\n        />\n        {errors.password && (\n          <Text\n            color='#F6406C'\n            size='small'\n            margin='0 0 1rem 0'\n            textAlign='center'\n          >\n            {errors.password.message}\n          </Text>\n        )}\n        <ReCaptcha\n          onVerifyCaptcha={onVerifyCaptcha}\n          backgroundColor={\n            watchCaptcha ? theme.colors.black1 : theme.colors.black2\n          }\n          hover={'none'}\n          verified={watchCaptcha}\n          margin='0 0 1rem 0'\n        />\n        {errors.captchaToken && (\n          <Text\n            color='#F6406C'\n            size='small'\n            margin='0 0 1rem 0'\n            textAlign='center'\n          >\n            {errors.captchaToken.message}\n          </Text>\n        )}\n        <input type='submit' value='Submit' ref={submitRef} />\n      </Form>\n      <Link to='/forgot-password'>Forgot password?</Link>\n      <Particles className=\"particles\"\n        params={{\n          \"particles\": {\n            \"number\": {\n              \"value\": 50\n            },\n            \"size\": {\n              \"value\": 3\n            }\n          },\n          \"interactivity\": {\n            \"events\": {\n              \"onhover\": {\n                \"enable\": true,\n                \"mode\": \"repulse\"\n              }\n            }\n          }\n        }} />\n    </FormContainer>\n\n  );\n};\n\nexport default Login;\n","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/ResetPassword.jsx",["103","104","105","106"],"import React, { useEffect, useRef } from 'react';\nimport { useTheme } from 'styled-components';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from 'react-toastify';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\n\nimport H1 from '../Typography/H1';\nimport FormContainer from './FormContainer';\nimport Text from '../Typography/Text';\nimport { ReCaptcha } from './ReCaptcha';\nimport { useAuth } from '../../hooks/useAuth';\nimport Form from './Form';\n\nconst validationSchema = Yup.object().shape({\n  password: Yup.string()\n    .required('Password is required')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\n      'Must contain 8 characters, one uppercase, one lowercase, one number and one special case character'\n    ),\n  passwordConfirm: Yup.string().oneOf(\n    [Yup.ref('password'), null],\n    'Passwords must match'\n  ),\n  captchaToken: Yup.string().required('Verify you are a human'),\n});\n\nconst ResetPassword = () => {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    setValue,\n    clearErrors,\n    watch,\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const auth = useAuth();\n\n  const theme = useTheme();\n\n  const history = useHistory();\n\n  const location = useLocation();\n\n  const submitRef = useRef(null);\n\n  const passwordRef = useRef(null);\n\n  const passwordConfirmRef = useRef(null);\n\n  // Manually register captchaToken\n  useEffect(() => {\n    register({ name: 'captchaToken' });\n  }, []);\n\n  // Watch for changes to captcha\n  const watchCaptcha = watch('captchaToken');\n\n  // Set focus on password\n  useEffect(() => {\n    passwordRef.current.focus();\n  }, []);\n\n  const onSubmit = async (data) => {\n    try {\n      const parsed = queryString.parse(location.search);\n      await auth.confirmPasswordReset(parsed.oobCode, data.password);\n      toast('Password reset.');\n      reset();\n      history.push('/login');\n    } catch {\n      toast.error('Error resetting password.');\n    }\n  };\n\n  const onVerifyCaptcha = (token) => {\n    setValue('captchaToken', token);\n    clearErrors(['captchaToken']);\n    submitRef.current.focus();\n  };\n\n  return (\n    <FormContainer>\n      <H1 textAlign='center' margin='0 0 2rem 0'>\n        Reset Password\n      </H1>\n      <Text margin='0 0 1rem 0' textAlign='center'>\n        Enter new password.\n      </Text>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          type='password'\n          name='password'\n          placeholder='Password'\n          ref={(e) => {\n            register(e);\n            passwordRef.current = e;\n          }}\n        />\n        {errors.password && (\n          <Text\n            color='#F6406C'\n            size='small'\n            margin='0 0 1rem 0'\n            textAlign='center'\n          >\n            {errors.password.message}\n          </Text>\n        )}\n        <input\n          type='password'\n          name='passwordConfirm'\n          placeholder='Confirm Password'\n          ref={(e) => {\n            register(e);\n            passwordConfirmRef.current = e;\n          }}\n        />\n        {errors.passwordConfirm && (\n          <Text\n            color='#F6406C'\n            size='small'\n            margin='0 0 1rem 0'\n            textAlign='center'\n          >\n            {errors.passwordConfirm.message}\n          </Text>\n        )}\n        <ReCaptcha\n          onVerifyCaptcha={onVerifyCaptcha}\n          backgroundColor={\n            watchCaptcha ? theme.colors.black1 : theme.colors.black2\n          }\n          hover={'none'}\n          verified={watchCaptcha}\n          margin='0 0 1rem 0'\n        />\n        {errors.captchaToken && (\n          <Text\n            color='#F6406C'\n            size='small'\n            margin='0 0 1rem 0'\n            textAlign='center'\n          >\n            {errors.captchaToken.message}\n          </Text>\n        )}\n        <input type='submit' value='Submit' ref={submitRef} />\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default ResetPassword;\n","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/Signup.jsx",["107","108","109","110"],"import React, { useEffect, useRef } from 'react';\nimport { useTheme } from 'styled-components';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router-dom';\n\nimport H1 from '../Typography/H1';\nimport FormContainer from './FormContainer';\nimport Text from '../Typography/Text';\nimport { ReCaptcha } from './ReCaptcha';\nimport { useAuth } from '../../hooks/useAuth';\nimport Form from './Form';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Email is required')\n  ,\n  password: Yup.string()\n    .required('Password is required')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\n      'Must contain 8 characters, one uppercase, one lowercase, one number and one special case character'\n    ),\n  passwordConfirm: Yup.string().oneOf(\n    [Yup.ref('password'), null],\n    'Passwords must match'\n  ),\n  captchaToken: Yup.string().required('Verify you are a human'),\n});\n\nconst Signup = () => {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    setValue,\n    clearErrors,\n    watch,\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const auth = useAuth();\n\n  const theme = useTheme();\n\n  const history = useHistory();\n\n  const submitRef = useRef(null);\n\n  const emailRef = useRef(null);\n\n  const passwordRef = useRef(null);\n\n  const passwordConfirmRef = useRef(null);\n\n  // Manually register captchaToken\n  useEffect(() => {\n    register({ name: 'captchaToken' });\n  }, []);\n\n  // Watch for changes to captcha\n  const watchCaptcha = watch('captchaToken');\n\n  // Set focus on email\n  useEffect(() => {\n    emailRef.current.focus();\n  }, []);\n\n  const onSubmit = async (data) => {\n    try {\n      await auth.signup('is' + data.email + '@ed.ritsumei.ac.jp', data.password);\n      toast('Welcome! ðŸ‘‹');\n      reset();\n      history.push('/');\n    } catch {\n      toast.error('Error signing up.');\n    }\n  };\n\n  const onVerifyCaptcha = (token) => {\n    setValue('captchaToken', token);\n    clearErrors(['captchaToken']);\n    submitRef.current.focus();\n  };\n\n  return (\n    <FormContainer>\n      <H1 textAlign='center' margin='0 0 2rem 0'>\n        Sign Up\n      </H1>\n      <Text margin='0 0 1rem 0' textAlign='center'>\n        Enter an email and password.\n      </Text>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <label>is\n          <input\n            type='text'\n            name='email'\n            placeholder='Email'\n            autoComplete='off'\n            ref={(e) => {\n              register(e);\n              emailRef.current = e;\n            }}\n          />\n          {errors.email && (\n            <Text\n              color='#F6406C'\n              size='small'\n              margin='0 0 1rem 0'\n              textAlign='center'\n            >\n              {errors.email.message}\n            </Text>\n          )}\n          @ed.ritsumei.ac.jp\n        </label>\n        <input\n          type='password'\n          name='password'\n          placeholder='Password'\n          ref={(e) => {\n            register(e);\n            passwordRef.current = e;\n          }}\n        />\n        {errors.password && (\n          <Text\n            color='#F6406C'\n            size='small'\n            margin='0 0 1rem 0'\n            textAlign='center'\n          >\n            {errors.password.message}\n          </Text>\n        )}\n        <input\n          type='password'\n          name='passwordConfirm'\n          placeholder='Confirm Password'\n          ref={(e) => {\n            register(e);\n            passwordConfirmRef.current = e;\n          }}\n        />\n        {errors.passwordConfirm && (\n          <Text\n            color='#F6406C'\n            size='small'\n            margin='0 0 1rem 0'\n            textAlign='center'\n          >\n            {errors.passwordConfirm.message}\n          </Text>\n        )}\n        <ReCaptcha\n          onVerifyCaptcha={onVerifyCaptcha}\n          backgroundColor={\n            watchCaptcha ? theme.colors.black1 : theme.colors.black2\n          }\n          hover={'none'}\n          verified={watchCaptcha}\n          margin='0 0 1rem 0'\n        />\n        {errors.captchaToken && (\n          <Text\n            color='#F6406C'\n            size='small'\n            margin='0 0 1rem 0'\n            textAlign='center'\n          >\n            {errors.captchaToken.message}\n          </Text>\n        )}\n        <input type='submit' value='Submit' ref={submitRef} />\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default Signup;\n","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/ForgotPassword.jsx",["111"],"import React, { useEffect, useRef } from 'react';\nimport { useTheme } from 'styled-components';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from 'react-toastify';\n\nimport Text from '../Typography/Text';\nimport H1 from '../Typography/H1';\nimport FormContainer from './FormContainer';\nimport { ReCaptcha } from './ReCaptcha';\nimport { useAuth } from '../../hooks/useAuth';\nimport Form from './Form';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Email is required')\n  ,\n  captchaToken: Yup.string().required('Verify you are a human'),\n});\n\nconst ForgotPassword = () => {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    setValue,\n    clearErrors,\n    watch,\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const auth = useAuth();\n\n  const theme = useTheme();\n\n  const submitRef = useRef(null);\n\n  const emailRef = useRef(null);\n\n  // Manually register captchaToken\n  useEffect(() => {\n    register({ name: 'captchaToken' });\n  }, []);\n\n  // Watch for changes to captcha\n  const watchCaptcha = watch('captchaToken');\n\n  // Set focus on email\n  useEffect(() => {\n    emailRef.current.focus();\n  }, []);\n\n  const onSubmit = async (data) => {\n    try {\n      await auth.sendPasswordResetEmail('is' + data.email + '@ed.ritsumei.ac.jp');\n      toast('Check email to complete. ðŸ“§');\n      reset();\n    } catch {\n      toast.error('Error resetting password.');\n    }\n  };\n\n  const onVerifyCaptcha = (token) => {\n    setValue('captchaToken', token);\n    clearErrors(['captchaToken']);\n    submitRef.current.focus();\n  };\n\n  return (\n    <FormContainer>\n      <H1 textAlign='center' margin='0 0 2rem 0'>\n        Forgot Password\n      </H1>\n      <Text margin='0 0 1rem 0' textAlign='center'>\n        Enter your email.\n      </Text>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <label>is\n          <input\n            type='text'\n            name='email'\n            placeholder='Email'\n            autoComplete='off'\n            ref={(e) => {\n              register(e);\n              emailRef.current = e;\n            }}\n          />\n          {errors.email && (\n            <Text\n              color='#F6406C'\n              size='small'\n              margin='0 0 1rem 0'\n              textAlign='center'\n            >\n              {errors.email.message}\n            </Text>\n          )}\n          @ed.ritsumei.ac.jp\n        </label>\n        <ReCaptcha\n          onVerifyCaptcha={onVerifyCaptcha}\n          backgroundColor={\n            watchCaptcha ? theme.colors.black1 : theme.colors.black2\n          }\n          hover={'none'}\n          verified={watchCaptcha}\n          margin='0 0 1rem 0'\n        />\n        {errors.captchaToken && (\n          <Text\n            color='#F6406C'\n            size='small'\n            margin='0 0 1rem 0'\n            textAlign='center'\n          >\n            {errors.captchaToken.message}\n          </Text>\n        )}\n        <input type='submit' value='Submit' ref={submitRef} />\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default ForgotPassword;\n","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/NotFound/NotFound.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/SearchBar/SearchBar.js",["112","113"],"import React, { useState } from \"react\";\nimport \"./SearchBar.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\n\nfunction SearchBar({ placeholder, data }) {\n  const [filteredData, setFilteredData] = useState([]);\n  const [wordEntered, setWordEntered] = useState(\"\");\n\n  const handleFilter = (event) => {\n    const searchWord = event.target.value;\n    setWordEntered(searchWord);\n    const newFilter = data.filter((value) => {\n      return value.subject_name.toLowerCase().includes(searchWord.toLowerCase());\n    });\n\n    if (searchWord === \"\") {\n      setFilteredData([]);\n    } else {\n      setFilteredData(newFilter);\n    }\n  };\n\n  const clearInput = () => {\n    setFilteredData([]);\n    setWordEntered(\"\");\n  };\n\n  return (\n    <div className=\"search\">\n      <div className=\"searchInputs\">\n        <input\n          type=\"text\"\n          placeholder={placeholder}\n          value={wordEntered}\n          onChange={handleFilter}\n        />\n        <div className=\"searchIcon\">\n          {filteredData.length === 0 ? (\n            <SearchIcon />\n          ) : (\n            <CloseIcon id=\"clearBtn\" onClick={clearInput} />\n          )}\n        </div>\n      </div>\n      {filteredData.length != 0 && (\n        <div className=\"dataResult\">\n          {filteredData.slice(0, 15).map((value, key) => {\n            return (\n              <a className=\"dataItem\" href={value.link} target=\"_blank\">\n                <p>{value.subject_name} </p>\n              </a>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SearchBar;\n","/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Layout/Grid.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/FormContainer.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/ReCaptcha.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Auth/Form.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Typography/Text.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Typography/H1.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Nav/Nav.jsx",[],"/mnt/c/Users/srisr/Documents/GitHub/isehub/src/components/Button/Button.jsx",[],{"ruleId":"114","severity":1,"message":"115","line":5,"column":8,"nodeType":"116","messageId":"117","endLine":5,"endColumn":12},{"ruleId":"114","severity":1,"message":"118","line":13,"column":9,"nodeType":"116","messageId":"117","endLine":13,"endColumn":13},{"ruleId":"119","severity":1,"message":"120","line":53,"column":6,"nodeType":"121","endLine":53,"endColumn":8,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":21,"column":51,"nodeType":"125","messageId":"126","endLine":21,"endColumn":52,"suggestions":"127"},{"ruleId":"123","severity":1,"message":"128","line":21,"column":54,"nodeType":"125","messageId":"126","endLine":21,"endColumn":55,"suggestions":"129"},{"ruleId":"123","severity":1,"message":"130","line":21,"column":57,"nodeType":"125","messageId":"126","endLine":21,"endColumn":58,"suggestions":"131"},{"ruleId":"119","severity":1,"message":"120","line":61,"column":6,"nodeType":"121","endLine":61,"endColumn":8,"suggestions":"132"},{"ruleId":"123","severity":1,"message":"124","line":23,"column":51,"nodeType":"125","messageId":"126","endLine":23,"endColumn":52,"suggestions":"133"},{"ruleId":"123","severity":1,"message":"128","line":23,"column":54,"nodeType":"125","messageId":"126","endLine":23,"endColumn":55,"suggestions":"134"},{"ruleId":"123","severity":1,"message":"130","line":23,"column":57,"nodeType":"125","messageId":"126","endLine":23,"endColumn":58,"suggestions":"135"},{"ruleId":"119","severity":1,"message":"120","line":63,"column":6,"nodeType":"121","endLine":63,"endColumn":8,"suggestions":"136"},{"ruleId":"119","severity":1,"message":"120","line":46,"column":6,"nodeType":"121","endLine":46,"endColumn":8,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":47,"column":28,"nodeType":"140","messageId":"141","endLine":47,"endColumn":30},{"ruleId":"142","severity":1,"message":"143","line":51,"column":15,"nodeType":"144","endLine":51,"endColumn":73},"no-unused-vars","'Text' is defined but never used.","Identifier","unusedVar","'auth' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.","ArrayExpression",["145"],"no-useless-escape","Unnecessary escape character: \\$.","Literal","unnecessaryEscape",["146","147"],"Unnecessary escape character: \\^.",["148","149"],"Unnecessary escape character: \\*.",["150","151"],["152"],["153","154"],["155","156"],["157","158"],["159"],["160"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement",{"desc":"161","fix":"162"},{"messageId":"163","fix":"164","desc":"165"},{"messageId":"166","fix":"167","desc":"168"},{"messageId":"163","fix":"169","desc":"165"},{"messageId":"166","fix":"170","desc":"168"},{"messageId":"163","fix":"171","desc":"165"},{"messageId":"166","fix":"172","desc":"168"},{"desc":"161","fix":"173"},{"messageId":"163","fix":"174","desc":"165"},{"messageId":"166","fix":"175","desc":"168"},{"messageId":"163","fix":"176","desc":"165"},{"messageId":"166","fix":"177","desc":"168"},{"messageId":"163","fix":"178","desc":"165"},{"messageId":"166","fix":"179","desc":"168"},{"desc":"161","fix":"180"},{"desc":"161","fix":"181"},"Update the dependencies array to be: [register]",{"range":"182","text":"183"},"removeEscape",{"range":"184","text":"185"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"186","text":"187"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"188","text":"185"},{"range":"189","text":"187"},{"range":"190","text":"185"},{"range":"191","text":"187"},{"range":"192","text":"183"},{"range":"193","text":"185"},{"range":"194","text":"187"},{"range":"195","text":"185"},{"range":"196","text":"187"},{"range":"197","text":"185"},{"range":"198","text":"187"},{"range":"199","text":"183"},{"range":"200","text":"183"},[1324,1326],"[register]",[771,772],"",[771,771],"\\",[774,775],[774,774],[777,778],[777,777],[1627,1629],[779,780],[779,779],[782,783],[782,782],[785,786],[785,785],[1627,1629],[1107,1109]]